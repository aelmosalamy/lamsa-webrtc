[{"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\index.js":"1","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\App.js":"2","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\index.js":"3","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\HomeScreen\\index.js":"4","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\meetingIdUtils.js":"5","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\BottomNavigation.js":"6","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\ChatBox.js":"7","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\VideoTiles.js":"8","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\mediaFunctions.js":"9","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\HomeScreen\\components\\UserDataModal.js":"10","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\Video.js":"11","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\selectElementContents.js":"12"},{"size":391,"mtime":1628524185091,"results":"13","hashOfConfig":"14"},{"size":712,"mtime":1628517715405,"results":"15","hashOfConfig":"14"},{"size":15626,"mtime":1628528898544,"results":"16","hashOfConfig":"14"},{"size":3376,"mtime":1628331473758,"results":"17","hashOfConfig":"14"},{"size":407,"mtime":1627413615609,"results":"18","hashOfConfig":"14"},{"size":2066,"mtime":1628527087552,"results":"19","hashOfConfig":"14"},{"size":1759,"mtime":1628519828545,"results":"20","hashOfConfig":"14"},{"size":772,"mtime":1628511724536,"results":"21","hashOfConfig":"14"},{"size":1161,"mtime":1627413615609,"results":"22","hashOfConfig":"14"},{"size":1476,"mtime":1627413615593,"results":"23","hashOfConfig":"14"},{"size":1002,"mtime":1628521061091,"results":"24","hashOfConfig":"14"},{"size":265,"mtime":1627413615609,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1q2h220",{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\index.js",["54","55"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\App.js",["56","57"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\index.js",["58","59","60","61","62","63","64","65","66"],"import { io } from 'socket.io-client';\r\n\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { useHistory, useParams, Prompt } from 'react-router';\r\n\r\nimport { getLocalMediaStream } from '../../utils/mediaFunctions';\r\nimport meetingIdUtils from '../../utils/meetingIdUtils';\r\n\r\nimport BottomNavigation from './components/BottomNavigation';\r\nimport ChatBox from './components/ChatBox';\r\nimport VideoTiles from './components/VideoTiles';\r\n\r\nimport './styles.css';\r\nconst CHIME = '/chime.webm';\r\n\r\nconst WEBSOCKETS_SERVER = 'ws://localhost:5000';\r\nconst ICE_SERVERS = [{ urls: ['stun:stun.l.google.com:19302'] }];\r\n\r\nvar peerConnections = {};\r\nvar remoteMediaStreams = {};\r\nvar localMediaStream = undefined;\r\nvar localScreenStream = undefined;\r\n\r\nconst MeetingScreen = () => {\r\n\tconst history = useHistory();\r\n\r\n\tconst { meeting_id } = useParams();\r\n\r\n\tconst [userData, setUserData] = useState(\r\n\t\tJSON.parse(sessionStorage.getItem('me'))\r\n\t);\r\n\tconst [others, setOthers] = useState({});\r\n\r\n\tconst [stateSocket, setStateSocket] = useState(undefined);\r\n\tconst [stateLocalMediaStream, setStateLocalMediaStream] =\r\n\t\tuseState(undefined);\r\n\tconst [stateScreenStream, setStateScreenStream] = useState(undefined);\r\n\tconst [stateRemoteMediaStreams, setStateRemoteMediaStreams] = useState({});\r\n\r\n\tconst [messages, setMessages] = useState([]);\r\n\tconst [showChat, setShowChat] = useState(false);\r\n\r\n\t// Request media stream and create connection through sockets\r\n\tuseEffect(() => {\r\n\t\t// Don't run socket initialization if meeting id is not valid\r\n\t\tif (!meetingIdUtils.isValid(meeting_id)) return;\r\n\t\t// If userData wasn't provided, return back to HomeScreen\r\n\t\tif (!userData) return history.replace('/', 'no_user_data');\r\n\t\t// Don't run socket initialization if socket exists\r\n\t\tif (stateSocket) return;\r\n\r\n\t\tconst socket = io(WEBSOCKETS_SERVER);\r\n\r\n\t\t// Fires once the socket \"opens\" a connection with WebSockets server\r\n\t\tsocket.on('connect', async () => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`CONNECTED to signaling server. socket id is ${socket.id}`\r\n\t\t\t);\r\n\r\n\t\t\t// Request access to mediaDevices and pass in a callback to peer up!\r\n\t\t\tlocalMediaStream = await getLocalMediaStream({\r\n\t\t\t\tvideo: true,\r\n\t\t\t\taudio: true,\r\n\t\t\t});\r\n\r\n\t\t\tsetStateLocalMediaStream(localMediaStream);\r\n\t\t\t// setStateRemoteMediaStreams({});\r\n\r\n\t\t\t// For making videos adapt to available screen width\r\n\t\t\twindow.onresize = Dish;\r\n\r\n\t\t\tconst newUserData = Object.assign({}, userData, {\r\n\t\t\t\tid: socket.id,\r\n\t\t\t});\r\n\r\n\t\t\tuserData &&\r\n\t\t\t\tsessionStorage.setItem('me', JSON.stringify(newUserData));\r\n\t\t\tsetUserData(newUserData);\r\n\t\t\tsessionStorage.setItem('others', JSON.stringify({}));\r\n\r\n\t\t\tsocket.emit('join meeting', meeting_id, newUserData, () => {\r\n\t\t\t\tconsole.log(`You joined meeting [${meeting_id}].`);\r\n\t\t\t});\r\n\r\n\t\t\t// Get data of other people in room (if any)\r\n\t\t\tsocket.emit('get others data', meeting_id, others => {\r\n\t\t\t\tconsole.log('Got other joinees data :D', others);\r\n\t\t\t\tupdateSessionStorage(obj => {\r\n\t\t\t\t\treturn others;\r\n\t\t\t\t}, 'others');\r\n\t\t\t\tsetOthers(others);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\t// Fires once the socket \"closes\" the connection existing between it and the\r\n\t\t// WebSocket server\r\n\t\tsocket.on('disconnect', () => {\r\n\t\t\tconsole.log('DISCONNECTED from signaling server.');\r\n\r\n\t\t\t// Nullify peer streams\r\n\t\t\tremoteMediaStreams = {};\r\n\t\t\tsetStateRemoteMediaStreams(remoteMediaStreams);\r\n\r\n\t\t\t// Close existing peer connections\r\n\t\t\tfor (let peer_id in peerConnections) {\r\n\t\t\t\tpeerConnections[peer_id].close();\r\n\t\t\t}\r\n\t\t\tconsole.log('Peer connectioned closed.');\r\n\r\n\t\t\t// Reset peerConnections\r\n\t\t\tpeerConnections = {};\r\n\t\t});\r\n\r\n\t\tsocket.on('someone joined', (id, userData) => {\r\n\t\t\tconsole.log(`${id} joined the meeting`);\r\n\r\n\t\t\t// Play a little audio indicator\r\n\t\t\tnew Audio(CHIME).play();\r\n\r\n\t\t\t// Add him to session\r\n\t\t\tupdateSessionStorage(obj => {\r\n\t\t\t\tobj[id] = userData;\r\n\t\t\t\tsetOthers(obj);\r\n\t\t\t\treturn obj;\r\n\t\t\t}, 'others');\r\n\t\t});\r\n\r\n\t\tsocket.on('someone left', id => {\r\n\t\t\tconsole.log(`${id} left the meeting`);\r\n\r\n\t\t\t// Remote the media stream associated with him\r\n\t\t\tdelete remoteMediaStreams[id];\r\n\t\t\tsetStateRemoteMediaStreams(remoteMediaStreams);\r\n\r\n\t\t\t// Remove him from session\r\n\t\t\tupdateSessionStorage(obj => {\r\n\t\t\t\tdelete obj[id];\r\n\t\t\t\tsetOthers(obj);\r\n\t\t\t\treturn obj;\r\n\t\t\t}, 'others');\r\n\t\t});\r\n\r\n\t\tsocket.on('chat message', msg => {\r\n\t\t\tconsole.log(`Message received: \"${msg}\"`);\r\n\t\t\tsetMessages(old_msgs => old_msgs.concat(msg));\r\n\t\t});\r\n\r\n\t\tsocket.on('webrtc:addPeer', (peer_id, should_create_offer) => {\r\n\t\t\tconsole.log(`Signaling server said to add peer [${peer_id}]`);\r\n\r\n\t\t\tif (peer_id in peerConnections) {\r\n\t\t\t\treturn console.log('Already connected to peer', peer_id);\r\n\t\t\t}\r\n\r\n\t\t\tconst peer_connection = new RTCPeerConnection(\r\n\t\t\t\t{\r\n\t\t\t\t\ticeServers: ICE_SERVERS,\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\t// Might be needed (does something about Firefox being able to communicate with Chrome)\r\n\t\t\t\t\toptional: [{ DtlsSrtpKeyAgreement: true }],\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tObject.assign(peerConnections, {\r\n\t\t\t\t[peer_id]: peer_connection,\r\n\t\t\t});\r\n\t\t\tconsole.log('Peer added', peerConnections);\r\n\r\n\t\t\t// Listen for 'icecandidate' events on the peer_connection\r\n\t\t\tpeer_connection.onicecandidate = e => {\r\n\t\t\t\tif (e.candidate)\r\n\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t'webrtc:relayICECandidate',\r\n\t\t\t\t\t\tmeeting_id,\r\n\t\t\t\t\t\tpeer_id,\r\n\t\t\t\t\t\te.candidate\r\n\t\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tpeer_connection.ontrack = e => {\r\n\t\t\t\tconsole.log('A track was received through peer connection');\r\n\t\t\t\t// Each stream will cause 2 track event calls (one for \"audio\" and one for \"video\"), we will act only in one of them, I choose the audio track because we might have video off in some instances, then we will grab the stream object from the event only once.\r\n\t\t\t\tif (e.track.kind === 'video') {\r\n\t\t\t\t\t// It's important that you mutate the local remoteMediaStream as you set the setRemoteMediaStreams state! Otherwise you gonna always have 1 remote media stream at a time\r\n\t\t\t\t\tObject.assign(remoteMediaStreams, {\r\n\t\t\t\t\t\t// Use peer_id as a key storing that peer's streams\r\n\t\t\t\t\t\t[peer_id]: e.streams[0],\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsetStateRemoteMediaStreams(\r\n\t\t\t\t\t\tObject.assign({}, remoteMediaStreams)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Audio indicator when you start receiving remote streams :D Idk why I love this feature so much\r\n\t\t\t\t\tnew Audio(CHIME).play();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Add local track to our peer connection\r\n\t\t\tconsole.log('Sending localMediaStream over peer connection');\r\n\t\t\tlocalMediaStream &&\r\n\t\t\t\tlocalMediaStream.getTracks().forEach(track => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'Adding localMediaStream track to peer connection',\r\n\t\t\t\t\t\ttrack\r\n\t\t\t\t\t);\r\n\t\t\t\t\tpeer_connection.addTrack(track, localMediaStream);\r\n\t\t\t\t});\r\n\r\n\t\t\t// Only one side of the peer connection should send offer\r\n\t\t\tif (should_create_offer) {\r\n\t\t\t\tconsole.log('Creating RTC offer to ', peer_id);\r\n\t\t\t\tpeer_connection\r\n\t\t\t\t\t.createOffer()\r\n\t\t\t\t\t.then(localSessionDescription => {\r\n\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t'Local offer/session description is: ',\r\n\t\t\t\t\t\t\tlocalSessionDescription\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tpeer_connection\r\n\t\t\t\t\t\t\t.setLocalDescription(localSessionDescription)\r\n\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\t\t\t'webrtc:relaySessionDescription',\r\n\t\t\t\t\t\t\t\t\tmeeting_id,\r\n\t\t\t\t\t\t\t\t\tpeer_id,\r\n\t\t\t\t\t\t\t\t\tlocalSessionDescription\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t'Offer setLocalDescription succeeded'\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t'Offer setLocalDescription failed',\r\n\t\t\t\t\t\t\t\t\terror\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log('Error sending offer:', error);\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsocket.on('webrtc:removePeer', peer_id => {\r\n\t\t\tconsole.log(`Signaling server said to remove peer: ${peer_id}`);\r\n\t\t\t// Remove stream from peer streams\r\n\t\t\tif (peer_id in remoteMediaStreams) {\r\n\t\t\t\t// Non-mutating removal\r\n\r\n\t\t\t\tdelete remoteMediaStreams[peer_id];\r\n\r\n\t\t\t\tsetStateRemoteMediaStreams(remoteMediaStreams);\r\n\t\t\t}\r\n\r\n\t\t\t// Close peer connection and delete it from our peerConnections object\r\n\t\t\tif (peer_id in peerConnections) {\r\n\t\t\t\tconsole.log('Removing peer', peerConnections);\r\n\t\t\t\tpeerConnections[peer_id].close();\r\n\r\n\t\t\t\tdelete peerConnections[peer_id];\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsocket.on(\r\n\t\t\t'webrtc:sessionDescription',\r\n\t\t\t(peer_id, remote_description) => {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t'Remote description received: ',\r\n\t\t\t\t\tremote_description\r\n\t\t\t\t);\r\n\r\n\t\t\t\tconsole.log(peer_id);\r\n\t\t\t\tconsole.log('peerConnections', peerConnections);\r\n\t\t\t\tconst peer = peerConnections[peer_id];\r\n\r\n\t\t\t\tconst remoteSessionDescription = new RTCSessionDescription(\r\n\t\t\t\t\tremote_description\r\n\t\t\t\t);\r\n\t\t\t\t// Set remote description\r\n\t\t\t\tpeer.setRemoteDescription(remoteSessionDescription)\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tif (remote_description.type == 'offer') {\r\n\t\t\t\t\t\t\tconsole.log('Creating answer');\r\n\t\t\t\t\t\t\tpeer.createAnswer().then(local_description => {\r\n\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t`Answer description is: `,\r\n\t\t\t\t\t\t\t\t\tlocal_description\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tpeer.setLocalDescription(local_description)\r\n\t\t\t\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\t\t\t\tsocket.emit(\r\n\t\t\t\t\t\t\t\t\t\t\t'webrtc:relaySessionDescription',\r\n\t\t\t\t\t\t\t\t\t\t\tmeeting_id,\r\n\t\t\t\t\t\t\t\t\t\t\tpeer_id,\r\n\t\t\t\t\t\t\t\t\t\t\tlocal_description\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t\t\t'Answer setLocalDescription succeeded'\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t\t\t\t'Answer setLocalDescription error:',\r\n\t\t\t\t\t\t\t\t\t\t\terror\r\n\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(error => {\r\n\t\t\t\t\t\tconsole.log('setRemoteDescription error: ', error);\r\n\t\t\t\t\t});\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t'Remote session description: ',\r\n\t\t\t\t\tremoteSessionDescription\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tsocket.on('webrtc:iceCandidate', (peer_id, ice_candidate) => {\r\n\t\t\tconst peer = peerConnections[peer_id];\r\n\r\n\t\t\tpeer.addIceCandidate(new RTCIceCandidate(ice_candidate));\r\n\t\t});\r\n\r\n\t\tsetStateSocket(socket);\r\n\t\tconsole.log('SOCKET CREATED');\r\n\t}, [stateSocket, meeting_id, userData]);\r\n\r\n\tconst chat_SendMsgHandler = msg => {\r\n\t\tconsole.log('Message passed to server...');\r\n\r\n\t\tstateSocket?.emit('chat message', meeting_id, msg, success => {\r\n\t\t\tif (!success) return console.error('Message sending failed!');\r\n\t\t\t// This is our message, make sure it says \"You\"\r\n\t\t\tObject.assign(msg, { sender: 'You' });\r\n\t\t\tsetMessages(old_msg => old_msg.concat(msg));\r\n\t\t\tconsole.log('SUCCESS: Message sent');\r\n\t\t});\r\n\t};\r\n\r\n\tconst handleToggleChat = () => {\r\n\t\tsetShowChat(!showChat);\r\n\t};\r\n\r\n\tconst handleMute = setMutedSlash => {\r\n\t\ttry {\r\n\t\t\tconsole.log('MUTE');\r\n\t\t\tconst track = stateLocalMediaStream?.getAudioTracks()[0];\r\n\r\n\t\t\ttrack.enabled = !track.enabled;\r\n\t\t\tsetMutedSlash(!track.enabled);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst handleVideo = setVideoSlash => {\r\n\t\ttry {\r\n\t\t\tconsole.log('VIDEO');\r\n\r\n\t\t\tconst track = stateLocalMediaStream?.getVideoTracks()[0];\r\n\r\n\t\t\ttrack.enabled = !track.enabled;\r\n\t\t\tsetVideoSlash(!track.enabled);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tconst startScreenSharing = setScreenSharing => {\r\n\t\ttry {\r\n\t\t\tconsole.log('SCREEN SHARE');\r\n\r\n\t\t\t// const stream =\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t};\r\n\r\n\tfunction Area(Increment, Count, Width, Height, Margin = 10) {\r\n\t\tlet i = 0;\r\n\t\tlet w = 0;\r\n\t\tlet h = Increment * 0.75 + Margin * 2;\r\n\t\twhile (i < Count) {\r\n\t\t\tif (w + Increment > Width) {\r\n\t\t\t\tw = 0;\r\n\t\t\t\th = h + Increment * 0.75 + Margin * 2;\r\n\t\t\t}\r\n\t\t\tw = w + Increment + Margin * 2;\r\n\t\t\ti++;\r\n\t\t}\r\n\t\tif (h > Height) return false;\r\n\t\telse return Increment;\r\n\t}\r\n\r\n\tfunction Dish() {\r\n\t\ttry {\r\n\t\t\tlet Margin = 10;\r\n\t\t\tlet Scenary = document.getElementById('VideoTiles__Row');\r\n\t\t\tlet Width = Scenary.offsetWidth - Margin * 2;\r\n\t\t\tlet Height = Scenary.offsetHeight - Margin * 2;\r\n\t\t\tlet Cameras = document.getElementsByClassName(\r\n\t\t\t\t'VideoTiles__VideoWrapper'\r\n\t\t\t);\r\n\t\t\tlet max = 0;\r\n\r\n\t\t\tlet i = 1;\r\n\t\t\twhile (i < 5000) {\r\n\t\t\t\tlet w = Area(i, Cameras.length, Width, Height, Margin);\r\n\t\t\t\tif (w === false) {\r\n\t\t\t\t\tmax = i - 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\r\n\t\t\tmax = max - Margin * 2;\r\n\t\t\tsetWidth(max, Margin);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction setWidth(width, margin) {\r\n\t\ttry {\r\n\t\t\tlet Cameras = document.getElementsByClassName(\r\n\t\t\t\t'VideoTiles__VideoWrapper'\r\n\t\t\t);\r\n\t\t\tfor (var s = 0; s < Cameras.length; s++) {\r\n\t\t\t\tCameras[s].style.width = width + 'px';\r\n\t\t\t\tCameras[s].style.margin = margin + 'px';\r\n\t\t\t\tCameras[s].style.height = width * 0.75 + 'px';\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\tuseEffect(() => {\r\n\t\t// Prompt user before leaving the room, also do necessary clean up\r\n\t\t// (terminate socket connection with server), the termination has to be done\r\n\t\t// manually due to this being a Single Page App, since routes are completely\r\n\t\t// visual, the page is never left/unloaded, hence connected sockets must be\r\n\t\t// closed manually.\r\n\t\tconsole.log('Started listening to route changes');\r\n\t}, []);*/\r\n\t// useEffect(() => {\r\n\t// \tconsole.log('stateRemoteMediaStreams', stateRemoteMediaStreams);\r\n\t// }, [stateRemoteMediaStreams]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// Function returned by the useEffect callback is ran on unmount (idk why i\r\n\t\t// never learned about this till now lol)\r\n\t\treturn () => {\r\n\t\t\t// Terminate socket\r\n\t\t\tif (stateSocket) {\r\n\t\t\t\tstateSocket.disconnect();\r\n\t\t\t\tsetStateSocket(undefined);\r\n\t\t\t\tconsole.log('SOCKET TERMINATED');\r\n\t\t\t\t// Clean up onresize handler as it is no longer needed when MeetingScreen is unmounted\r\n\t\t\t\twindow.onresize = undefined;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// If socket isn't a dependency, the value of socket inside this hook will\r\n\t\t// always stay as \"undefined\", hence keeping socket as dependency updates\r\n\t\t// the value of socket everytime socket changes, think of variable in\r\n\t\t// useEffect as byVal not byRef\r\n\t}, [stateSocket]);\r\n\r\n\t// Responsive video resizing whenever a new client enters or leaves\r\n\tuseEffect(() => {\r\n\t\tDish();\r\n\t}, [stateLocalMediaStream, stateRemoteMediaStreams]);\r\n\r\n\treturn (\r\n\t\t<div className=\"MeetingScreen\">\r\n\t\t\t{meetingIdUtils.isValid(meeting_id) ? (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<Prompt\r\n\t\t\t\t\t\twhen={!!userData}\r\n\t\t\t\t\t\tmessage={location =>\r\n\t\t\t\t\t\t\t`Are you sure you wanna leave your current meeting?`\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<div className=\"MeetingScreen__UpperSection\">\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t<VideoTiles\r\n\t\t\t\t\t\t\t\tjoinees={[\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tid: stateSocket?.id,\r\n\t\t\t\t\t\t\t\t\t\tuserData,\r\n\t\t\t\t\t\t\t\t\t\tstream: stateLocalMediaStream,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\t...Object.keys(stateRemoteMediaStreams).map(\r\n\t\t\t\t\t\t\t\t\t\tid => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\t\t\tid,\r\n\t\t\t\t\t\t\t\t\t\t\t\tuserData: others[id],\r\n\t\t\t\t\t\t\t\t\t\t\t\tstream: stateRemoteMediaStreams[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tid\r\n\t\t\t\t\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t\t]}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<ChatBox\r\n\t\t\t\t\t\t\tusername={userData?.name}\r\n\t\t\t\t\t\t\topen={showChat}\r\n\t\t\t\t\t\t\tmessages={messages}\r\n\t\t\t\t\t\t\tsendMessageHandler={chat_SendMsgHandler}\r\n\t\t\t\t\t\t\tmeeting_id={meeting_id}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<BottomNavigation\r\n\t\t\t\t\t\thandleMute={handleMute}\r\n\t\t\t\t\t\thandleVideo={handleVideo}\r\n\t\t\t\t\t\thandleToggleChat={handleToggleChat}\r\n\t\t\t\t\t\tstartScreenSharing={startScreenSharing}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</>\r\n\t\t\t) : (\r\n\t\t\t\t<>\r\n\t\t\t\t\t<p className=\"text-danger\">\r\n\t\t\t\t\t\tERROR: Invalid meeting id {meeting_id}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// Given a function and an item, updates sessionStorage\r\nconst updateSessionStorage = (fn, item) => {\r\n\tif (sessionStorage.getItem(item)) {\r\n\t\tconst value = JSON.parse(sessionStorage.getItem(item));\r\n\t\tsessionStorage.setItem(item, JSON.stringify(fn(value)));\r\n\t}\r\n};\r\n\r\nexport default MeetingScreen;\r\n","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\HomeScreen\\index.js",["67","68","69"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\meetingIdUtils.js",["70"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\BottomNavigation.js",["71","72","73","74"],"import React, { useState } from 'react';\r\nimport { Container, Navbar, Dropdown, DropdownButton } from 'react-bootstrap';\r\n\r\nconst BottomNavigation = ({\r\n\thandleMute,\r\n\thandleVideo,\r\n\thandleToggleChat,\r\n\tstartScreenSharing,\r\n}) => {\r\n\tconst [mutedSlash, setMutedSlash] = useState(false);\r\n\tconst [videoSlash, setVideoSlash] = useState(false);\r\n\tconst [screenSharing, setScreenSharing] = useState(false);\r\n\r\n\treturn (\r\n\t\t<Navbar className=\"bottom_nav\">\r\n\t\t\t{/* <Container className=\"bottom_nav_buttons\"> */}\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => handleVideo(setVideoSlash)}\r\n\t\t\t\t\tclassName=\"button\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<i\r\n\t\t\t\t\t\tclassName={`fas fa-video${videoSlash ? '-slash' : ''}`}\r\n\t\t\t\t\t></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => handleMute(setMutedSlash)}\r\n\t\t\t\t\tclassName=\"button\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<i\r\n\t\t\t\t\t\tclassName={`fas fa-microphone${\r\n\t\t\t\t\t\t\tmutedSlash ? '-slash' : ''\r\n\t\t\t\t\t\t}`}\r\n\t\t\t\t\t></i>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button className=\"end_call\">Leave</button>\r\n\t\t\t<div className=\"buttons\">\r\n\t\t\t\t<div onClick={handleToggleChat} className=\"button\">\r\n\t\t\t\t\t<i className={`fas fa-comments`}></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tonClick={() => startScreenSharing(setScreenSharing)}\r\n\t\t\t\t\tclassName=\"button\"\r\n\t\t\t\t\tid=\"eclipse_button\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<i className={`fa fa-desktop`}></i>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"dropup\">\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"button dropdown-toggle\"\r\n\t\t\t\t\t\tid=\"meeting_controls_dropdown\"\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tdata-toggle=\"dropdown\"\r\n\t\t\t\t\t\taria-haspopup=\"true\"\r\n\t\t\t\t\t\taria-expanded=\"false\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<i className={`fas fa-ellipsis-h`}></i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div\r\n\t\t\t\t\t\tclassName=\"dropdown-menu meeting_controls_dropdown\"\r\n\t\t\t\t\t\taria-labelledby=\"meeting_controls_dropdown\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<div className=\"button dropdown-item\">\r\n\t\t\t\t\t\t\t<i className={`fas fa-edit`}></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"button dropdown-item\">\r\n\t\t\t\t\t\t\t<i className={`fas fa-expand`}></i>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{/* </Container> */}\r\n\t\t</Navbar>\r\n\t);\r\n};\r\n\r\nexport default BottomNavigation;\r\n",["75","76"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\ChatBox.js",[],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\VideoTiles.js",[],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\mediaFunctions.js",["77","78","79","80"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\HomeScreen\\components\\UserDataModal.js",["81","82"],"D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\screens\\MeetingScreen\\components\\Video.js",["83","84"],"import { cyan } from 'colors';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nconst Video = ({ user, isLocal, muted = false, ...props }) => {\r\n\tconst videoRef = useRef(null);\r\n\r\n\t// Leveraging babel to use new spec's optional chaining :D\r\n\tuseEffect(() => {\r\n\t\tif (!videoRef.current) return;\r\n\t\tvideoRef.current.srcObject = user.stream;\r\n\r\n\t\tvideoRef.current.defaultMuted = muted;\r\n\t\tvideoRef.current.muted = muted;\r\n\t\tconsole.log('stream set');\r\n\t}, [videoRef.current, muted]);\r\n\r\n\treturn user?.stream ? (\r\n\t\t<div className=\"VideoTiles__VideoWrapper\">\r\n\t\t\t{/* <code>{JSON.stringify(user.userData)}</code> */}\r\n\t\t\t<video\r\n\t\t\t\t{...props}\r\n\t\t\t\tclassName={'VideoTiles__Video ' + props.className}\r\n\t\t\t\tid={user.id}\r\n\t\t\t\tref={videoRef}\r\n\t\t\t\tautoPlay\r\n\t\t\t/>\r\n\t\t\t<p className=\"VideoTiles__username\">\r\n\t\t\t\t{isLocal ? 'You' : user.userData?.name}{' '}\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t) : (\r\n\t\t<Spinner animation=\"grow\" role=\"status\" />\r\n\t);\r\n};\r\n\r\nexport default Video;\r\n","D:\\adham\\Coding\\Web\\webrtc-demo\\client\\src\\utils\\selectElementContents.js",[],{"ruleId":"85","severity":1,"message":"86","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":9},{"ruleId":"85","severity":1,"message":"89","line":7,"column":8,"nodeType":"87","messageId":"88","endLine":7,"endColumn":14},{"ruleId":"85","severity":1,"message":"90","line":2,"column":50,"nodeType":"87","messageId":"88","endLine":2,"endColumn":54},{"ruleId":"85","severity":1,"message":"91","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":16},{"ruleId":"85","severity":1,"message":"92","line":3,"column":28,"nodeType":"87","messageId":"88","endLine":3,"endColumn":35},{"ruleId":"85","severity":1,"message":"93","line":4,"column":10,"nodeType":"87","messageId":"88","endLine":4,"endColumn":13},{"ruleId":"85","severity":1,"message":"94","line":4,"column":15,"nodeType":"87","messageId":"88","endLine":4,"endColumn":18},{"ruleId":"85","severity":1,"message":"95","line":23,"column":5,"nodeType":"87","messageId":"88","endLine":23,"endColumn":22},{"ruleId":"85","severity":1,"message":"96","line":38,"column":9,"nodeType":"87","messageId":"88","endLine":38,"endColumn":26},{"ruleId":"85","severity":1,"message":"97","line":38,"column":28,"nodeType":"87","messageId":"88","endLine":38,"endColumn":48},{"ruleId":"98","severity":1,"message":"99","line":286,"column":35,"nodeType":"100","messageId":"101","endLine":286,"endColumn":37},{"ruleId":"102","severity":1,"message":"103","line":332,"column":5,"nodeType":"104","endLine":332,"endColumn":40,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":479,"column":5,"nodeType":"104","endLine":479,"endColumn":53,"suggestions":"107"},{"ruleId":"85","severity":1,"message":"108","line":4,"column":2,"nodeType":"87","messageId":"88","endLine":4,"endColumn":7},{"ruleId":"85","severity":1,"message":"109","line":7,"column":2,"nodeType":"87","messageId":"88","endLine":7,"endColumn":13},{"ruleId":"85","severity":1,"message":"110","line":8,"column":2,"nodeType":"87","messageId":"88","endLine":8,"endColumn":12},{"ruleId":"111","severity":1,"message":"112","line":19,"column":1,"nodeType":"113","endLine":19,"endColumn":40},{"ruleId":"85","severity":1,"message":"114","line":2,"column":10,"nodeType":"87","messageId":"88","endLine":2,"endColumn":19},{"ruleId":"85","severity":1,"message":"115","line":2,"column":29,"nodeType":"87","messageId":"88","endLine":2,"endColumn":37},{"ruleId":"85","severity":1,"message":"116","line":2,"column":39,"nodeType":"87","messageId":"88","endLine":2,"endColumn":53},{"ruleId":"85","severity":1,"message":"117","line":12,"column":9,"nodeType":"87","messageId":"88","endLine":12,"endColumn":22},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"85","severity":1,"message":"122","line":1,"column":7,"nodeType":"87","messageId":"88","endLine":1,"endColumn":28},{"ruleId":"85","severity":1,"message":"123","line":2,"column":5,"nodeType":"87","messageId":"88","endLine":2,"endColumn":23},{"ruleId":"85","severity":1,"message":"124","line":3,"column":5,"nodeType":"87","messageId":"88","endLine":3,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":34,"column":1,"nodeType":"113","endLine":34,"endColumn":68},{"ruleId":"85","severity":1,"message":"125","line":1,"column":20,"nodeType":"87","messageId":"88","endLine":1,"endColumn":29},{"ruleId":"85","severity":1,"message":"126","line":10,"column":8,"nodeType":"87","messageId":"88","endLine":10,"endColumn":15},{"ruleId":"85","severity":1,"message":"127","line":1,"column":10,"nodeType":"87","messageId":"88","endLine":1,"endColumn":14},{"ruleId":"102","severity":1,"message":"128","line":16,"column":5,"nodeType":"104","endLine":16,"endColumn":30,"suggestions":"129"},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'Popper' is defined but never used.","'Link' is defined but never used.","'Button' is defined but never used.","'useMemo' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'localScreenStream' is assigned a value but never used.","'stateScreenStream' is assigned a value but never used.","'setStateScreenStream' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Dish' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["130"],"React Hook useEffect has a missing dependency: 'Dish'. Either include it or remove the dependency array.",["131"],"'Alert' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Container' is defined but never used.","'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'screenSharing' is assigned a value but never used.","no-native-reassign",["132"],"no-negated-in-lhs",["133"],"'MUTE_AUDIO_BY_DEFAULT' is assigned a value but never used.","'local_media_stream' is assigned a value but never used.","'USE_VIDEO' is assigned a value but never used.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","'cyan' is defined but never used.","React Hook useEffect has a missing dependency: 'user.stream'. Either include it or remove the dependency array. Mutable values like 'videoRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["134"],{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},"Update the dependencies array to be: [stateSocket, meeting_id, userData, history, Dish]",{"range":"141","text":"142"},"Update the dependencies array to be: [Dish, stateLocalMediaStream, stateRemoteMediaStreams]",{"range":"143","text":"144"},"Update the dependencies array to be: [muted, user.stream]",{"range":"145","text":"146"},[9946,9981],"[stateSocket, meeting_id, userData, history, Dish]",[13959,14007],"[Dish, stateLocalMediaStream, stateRemoteMediaStreams]",[502,527],"[muted, user.stream]"]